//! Data structures for (de-)serialization as generated by `prost-build`.

use std::str::FromStr;

use noodles_vcf::record::info::field;

include!(concat!(env!("OUT_DIR"), "/annonars.dbsnp.pbs.rs"));

impl TryFrom<noodles_vcf::record::Record> for Record {
    type Error = anyhow::Error;

    fn try_from(value: noodles_vcf::record::Record) -> Result<Self, Self::Error> {
        let chrom = value.chromosome().to_string();
        let pos: usize = value.position().into();
        let pos: i32 = pos.try_into()?;
        let ref_allele = value.reference_bases().to_string();
        let alt_allele = value
            .alternate_bases()
            .get(0)
            .expect("no alternate allele?")
            .to_string();
        let rs_id = if let Some(Some(field::Value::Integer(rs))) =
            value.info().get(&field::Key::from_str("RS")?)
        {
            format!("RS{}", rs)
        } else {
            anyhow::bail!("no rs id in dbSNP record")
        };

        Ok(Record {
            chrom,
            pos,
            ref_allele,
            alt_allele,
            rs_id,
        })
    }
}
