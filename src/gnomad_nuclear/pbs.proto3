syntax = "proto3";

package annonars.gnomad_nuclear.pbs;

// Protocol buffer for `Vep.domains`
message Domain {
    // Domain ID.
    string id = 1;
    // Domain source.
    string source = 2;
}

// Protocol buffer for `Vep.sift` and `Vep.polyphen`.
message Prediction {
    // Prediction.
    string prediction = 1;
    // Score.
    float score = 2;
}

// Protocol buffer for the gnomAD-mtDNA VEP predictions.
message Vep {
    // Allele of record.
    string allele = 1;
    // Consequence, e.g., `"missense_variant"`.
    string consequence = 2;
    // Impact, e.g., `"MODERATE"`.
    string impact = 3;
    // Gene symbol, e.g., `"PCSK9"`.
    string symbol = 4;
    // Gene ID, `e.g., "ENSG00000169174"`.
    string gene = 5;
    // Feature type, e.g., `"Transcript"`.
    string feature_type = 6;
    // Feature ID, e.g., `"ENST00000302118"`.
    string feature = 7;
    // Feature biotype, e.g., `"protein_coding"`.
    string feature_biotype = 8;
    // Ranked exon number, e.g., `"1/4"`.
    optional string exon = 9;
    // Ranked intron number, e.g., `"1/4"`.
    optional string intron = 10;
    // cDNA position, e.g., `"ENST00000302118.5:c.89C>G"`.
    optional string hgvsc = 11;
    // Protein position, e.g., `"ENSP00000302118.5:p.Thr30Arg"`.
    optional string hgvsp = 12;
    // cDNA position, e.g., `"89/1863"`.
    optional string cdna_position = 13;
    // CDS position, e.g., `"89/1863"`.
    optional string cds_position = 14;
    // Protein position, e.g., `"30/620"`.
    optional string protein_position = 15;
    // Amino acids, e.g., `"T/R"`.
    optional string amino_acids = 16;
    // Codons, e.g., `"gCg/gGg"`.
    optional string codons = 17;
    // Existing variation info.
    optional string existing_variation = 18;
    // dbSNP ID, e.g., `"rs28942080"`.
    optional string dbsnp_id = 19;
    // Distance output of VEP.
    optional string distance = 20;
    // Strand, e.g., `"1"`.
    optional string strand = 21;
    // Flags, e.g., `"cds_end_NF"`.
    optional string flags = 22;
    // Variant class, e.g., `"SNV"`.
    optional string variant_class = 23;
    // Minimised output of VEP.
    optional string minimised = 24;
    // Symbol source, e.g., `"HGNC"`.
    optional string symbol_source = 25;
    // HGNC ID, e.g., `"HGNC:8706"`.
    optional string hgnc_id = 26;
    // Whether this is the canonical transcript.
    bool canonical = 27;
    // Transcript support level, e.g., `"1"`.
    optional int32 tsl = 28;
    // APPRIS annotation, e.g. `"P1"`.
    optional string appris = 29;
    // CCDS ID, e.g., `"CCDS30547.1"`.
    optional string ccds = 30;
    // Ensembl protein ID, e.g., `"ENSP00000302118"`.
    optional string ensp = 31;
    // SwissProt ID, e.g., `"P04114"`.
    optional string swissprot = 32;
    // TREMBL ID, e.g., `"Q5T4W7"`.
    optional string trembl = 33;
    // UniParc ID, e.g., `"UPI000002D4B2"`.
    optional string uniparc = 34;
    // Gene phenotype from VEP.
    optional string gene_pheno = 35;
    // SIFT prediction, e.g., `"tolerated(0.06)"`.
    optional Prediction sift = 36;
    // PolyPhen prediction, e.g., `"benign(0.001)"`.
    optional Prediction polyphen = 37;
    // Protein domains, e.g., `[["2p4e", "ENSP_mappings"], ["2qtw", "ENSP_mappings"]]`.
    repeated Domain domains = 38;
    // HGVS offset.
    optional string hgvs_offset = 39;

    // Overall minor allele frequency.
    optional float gmaf = 40;
    // Minor allele frequency in AFR population.
    optional float afr_maf = 41;
    // Minor allele frequency in AMR population.
    optional float amr_maf = 42;
    // Minor allele frequency in EAS population.
    optional float eas_maf = 43;
    // Minor allele frequency in EUR population.
    optional float eur_maf = 44;
    // Minor allele frequency in SAS population.
    optional float sas_maf = 45;
    // Minor allele frequency in AA population.
    optional float aa_maf = 46;
    // Minor allele frequency in EA population.
    optional float ea_maf = 47;
    // Minor allele frequency in ExAC.
    optional float exac_maf = 48;
    // Minor allele frequency EXAC ADJ population.
    optional float exac_adj_maf = 49;
    // Minor allele frequency in ExAC AFR population.
    optional float exac_afr_maf = 50;
    // Minor allele frequency in ExAC AMR population.
    optional float exac_amr_maf = 51;
    // Minor allele frequency in ExAC EAS population.
    optional float exac_eas_maf = 52;
    // Minor allele frequency in ExAC FIN population.
    optional float exac_fin_maf = 53;
    // Minor allele frequency in ExAC NFE population.
    optional float exac_nfe_maf = 54;
    // Minor allele frequency in ExAC OTH population.
    optional float exac_oth_maf = 55;
    // Minor allele frequency in ExAC SAS population.
    optional float exac_sas_maf = 56;

    // Clinical significance.
    optional string clin_sig = 57;
    // Whether the variant is somatic.
    optional string somatic = 58;
    // Phenotype.
    optional string pheno = 59;
    // Pubmed ID.
    optional string pubmed = 60;
    // Motif name.
    optional string motif_name = 61;
    // Motif pos.
    optional string motif_pos = 62;
    // "high inf pos" from VEP.
    optional string high_inf_pos = 63;
    // Motif score change.
    optional string motif_score_change = 64;
    // Loss of function prediction.
    optional string lof = 65;
    // Loss of function filter.
    optional string lof_filter = 66;
    // Loss of function flags.
    optional string lof_flags = 67;
    // Loss of function info.
    optional string lof_info = 68;
}

// Protocol buffer enum for site-level filters.
enum Filter {
    // Allele count is zero after filtering out low-confidence genotypes (GQ < 20; DP < 10; and AB <
    // 0.2 for het calls).
    ALLELE_COUNT_IS_ZERO = 0;
    // InbreedingCoeff < -0.3.
    INBREEDING_COEFF = 1;
    // Passed all variant filters
    PASS = 2;
    // Failed random forest filtering thresholds of 0.055272738028512555, 0.20641025579497013
    // (probabilities of being a true positive variant) for SNPs, indels
    RANDOM_FOREST = 3;
}

// Store the relevant allele counts and frequencies in a given sub cohort.
message AlleleCounts {
    // Number of alternate alleles in sub cohort.
    int32 ac = 1;
    // Total number of alleles in the sub cohort.
    int32 an = 2;
    // Number of homozygous alternate alleles in the sub cohort.
    int32 nhomalt = 3;
    // Alternate allele frequency in the sub cohort.
    float af = 4;
}

// Store the allele counts for the given sub cohort and sub cohort factored by sex.
message AlleleCountsBySex {
    // Overall allele counts in the sub cohort.
    AlleleCounts overall = 1;
    // Allele counts in female individuals of sub cohort.
    AlleleCounts female = 2;
    // Allele counts in male individuals of sub cohort.
    AlleleCounts male = 3;
}

// Store the allele counts for the given sub cohort in the given population.
message PopulationAlleleCounts {
    // Name of the population.
    string population = 1;
    // The overall allele counts and the one by sex.
    AlleleCountsBySex counts = 2;

    // The filtering allele frequency (using Poisson 95% CI).
    float faf95 = 3;
    // The filtering allele frequency (using Poisson 99% CI).
    float faf99 = 4;
}

// Store the allele counts for the given cohort.
message CohortAlleleCounts {
    // Name of the cohort.
    optional string cohort = 1;
    // Allele counts for each population.
    repeated PopulationAlleleCounts by_population = 2;
    // Allele counts by sex.
    AlleleCountsBySex by_sex = 3;
    // Raw allele counts.
    AlleleCounts raw = 4;

    // The population with maximum AF.
    string popmax = 5;
    // Maximum allele frequency across populations (excluding samples of Ashkenazi, Finnish, and
    // indeterminate ancestry).
    float af_popmax = 6;
    // Allele count in population with maximum AF.
    int32 ac_popmax = 7;
    // Total number of alleles in population with maximum AF.
    int32 an_popmax = 8;
    // Total number of homozygous individuals in population with maximum AF.
    int32 nhomalt_popmax = 9;
}

// Encapsulate VCF INFO fields related to age.
message AgeInfo {
    // Histogram of ages of individuals with a homoplasmic variant; bin edges are: [30.0, 35.0,
    // 40.0, 45.0, 50.0, 55.0, 60.0, 65.0, 70.0, 75.0, 80.0].
    repeated int32 age_hist_hom_bin_freq = 1;
    // Count of age values falling below lowest histogram bin edge for individuals with a
    // homoplasmic variant.
    optional int32 age_hist_hom_n_smaller = 2;
    // Count of age values falling above highest histogram bin edge for individuals with a
    // homoplasmic variant.
    optional int32 age_hist_hom_n_larger = 3;
    // Histogram of ages of individuals with a heteroplasmic variant; bin edges are: [30.0, 35.0,
    // 40.0, 45.0, 50.0, 55.0, 60.0, 65.0, 70.0, 75.0, 80.0]
    repeated int32 age_hist_het_bin_freq = 4;
    // Count of age values falling below lowest histogram bin edge for individuals with a
    // heteroplasmic variant.
    optional int32 age_hist_het_n_smaller = 5;
    // Count of age values falling above highest histogram bin edge for individuals with a
    // heteroplasmic variant.
    optional int32 age_hist_het_n_larger = 6;
}

// Encapsulate VCF INFO fields related to depth.
message DepthInfo {
    // Count of dp values falling above highest histogram bin edge for all individuals.
    optional int32 dp_hist_all_n_larger = 1;
    // Count of dp values falling above highest histogram bin edge for individuals with the
    // alternative allele
    optional int32 dp_hist_alt_n_larger = 2;
    // Histogram of dp values for all individuals; bin edges are: [0.0, 200.0, 400.0, 600.0, 800.0,
    // 1000.0, 1200.0, 1400.0, 1600.0, 1800.0, 2000.0]
    repeated int32 dp_hist_all_bin_freq = 3;
    // Histogram of dp values for individuals with the alternative allele; bin edges are: [0.0,
    // 200.0, 400.0, 600.0, 800.0, 1000.0, 1200.0, 1400.0, 1600.0, 1800.0, 2000.0]
    repeated int32 dp_hist_alt_bin_freq = 4;
}

// Encapsulate quality-related information.
message QualityInfo {
    // Phred-scaled p-value of Fisher's exact test for strand bias.
    float fs = 1;
    // Inbreeding coefficient as estimated from the genotype likelihoods per-sample when compared
    // against the Hardy-Weinberg expectation.
    float inbreeding_coeff = 2;
    // Root mean square of the mapping quality of reads across all samples.
    float mq = 3;
    // Z-score from Wilcoxon rank sum test of alternate vs. reference read mapping qualities.
    float mq_rank_sum = 4;
    // Variant call confidence normalized by depth of sample reads supporting a variant.
    float qd = 5;
    // Z-score from Wilcoxon rank sum test of alternate vs. reference read position bias.
    float read_pos_ranksum = 6;
    // Strand bias estimated by the symmetric odds ratio test.
    float sor = 7;
    // Variant was used to build the positive training set of high-quality variants for VQSR.
    bool vqsr_positive_train_site = 8;
    // Variant was used to build the negative training set of low-quality variants for VQSR.
    bool vqsr_negative_train_site = 9;
    // Z-score from Wilcoxon rank sum test of alternate vs. reference base qualities.
    float base_q_rank_sum = 10;
    // Z-score from Wilcoxon rank sum test of alternate vs. reference number of hard clipped bases.
    float clipping_rank_sum = 11;
    // Depth of informative coverage for each sample; reads with MQ=255 or with bad mates are
    // filtered.
    int32 dp = 12;
    // Log-odds ratio of being a true variant versus being a false positive under the trained VQSR
    // Gaussian mixture model.
    float vqslod = 13;
    // Worst-performing annotation in the VQSR Gaussian mixture model.
    string vqsr_culprit = 14;
    // Variant falls within a segmental duplication region.
    bool segdup = 15;
    // Variant falls within a low complexity region.
    bool lcr = 16;
    // Variant falls within a reference decoy region.
    bool decoy = 17;
    // Variant was a callset-wide doubleton that was transmitted within a family (i.e., a singleton
    // amongst unrelated sampes in cohort).
    bool transmitted_singleton = 18;
    // Maximum p-value over callset for binomial test of observed allele balance for a heterozygous
    // genotype, given expectation of AB=0.5.
    float pab_max = 19;
}

// Random forest related information.
message RandomForestInfo {
    // Random forest prediction probability for a site being a true variant.
    float rf_tp_probability = 1;
    // Variant was labelled as a positive example for training of random forest model.
    bool rf_positive_label = 2;
    // Variant was labelled as a negative example for training of random forest model.
    bool rf_negative_label = 3;
    // Random forest training label.
    string rf_label = 4;
    // Variant was used in training random forest model.
    bool rf_train = 5;
}

// Variant type related information.
message VariantInfo {
    // Variant type (snv, indel, multi-snv, multi-indel, or mixed).
    string variant_type = 1;
    // Allele type (snv, ins, del, or mixed).
    string allele_type = 2;
    // Total number of alternate alleles observed at variant locus.
    int32 n_alt_alleles = 3;
    // Variant type was mixed.
    bool was_mixed = 4;
    // Variant locus coincides with a spanning deletion (represented by a star) observed elsewhere
    // in the callset.
    bool has_star = 5;
}

// Protocol buffer for the gnomAD-mtDNA VCF record.
//
// The more specialized fields from the INFO column are stored in separate, optional fields such
// that we don't end up with a humongous message.
message Record {
    // Chromosome name.
    string chrom = 1;
    // 1-based start position.
    int32 pos = 2;
    // Reference allele.
    string ref_allele = 3;
    // Alternate allele.
    string alt_allele = 4;

    // Site-level filters.
    repeated Filter filters = 5;
    // Consequence annotation from ENSEMBL VEP.
    repeated Vep vep = 6;

    // Variant allele counts in the different cohorts and population.
    //
    // The populations in gnomAD v2/3 are: empty for global, "controls", "non_cancer", "non_neuro",
    // and "non_topmed".
    repeated CohortAlleleCounts allele_counts = 7;
    // Variant (on sex chromosome) falls outside a pseudoautosomal region
    bool nonpar = 8;

    // Random forest related information.
    optional RandomForestInfo rf_info = 9;
    // Variant-related information details.
    optional VariantInfo variant_info = 10;
    // Summary information for variant quality interpretation.
    optional QualityInfo quality_info = 11;
    // Age-related information.
    optional AgeInfo age_info = 12;
    // Depth of coverage-related information.
    optional DepthInfo depth_info = 13;
}
